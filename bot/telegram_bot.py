from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from django.conf import settings
from clients.models import Client
from orders.models import Order
from asgiref.sync import sync_to_async

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
PHONE = 0

class OrderBot:
    def __init__(self):
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                PHONE: [
                    MessageHandler(filters.CONTACT, self.get_orders_by_contact),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_orders_by_text)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        self.application.add_handler(conv_handler)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        keyboard = [
            ['üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º—ã –∫–æ–º–ø–∞–Ω–∏—è "–û–∫–Ω–∞ –≤ –º–∏—Ä"! –£ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )
        return PHONE

    @sync_to_async
    def get_client_orders(self, phone):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            clean_phone = ''.join(filter(str.isdigit, phone))
            
            if len(clean_phone) == 11:
                print(f"–ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {clean_phone}")
                
                try:
                    client = Client.objects.get(phone=clean_phone)
                    orders = list(Order.objects.filter(client=client).order_by('-start_date'))
                    return client, orders
                except Client.DoesNotExist:
                    if clean_phone.startswith('7') or clean_phone.startswith('8'):
                        alt_phone = clean_phone[1:]
                        print(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä: {alt_phone}")
                        try:
                            client = Client.objects.get(phone=alt_phone)
                            orders = list(Order.objects.filter(client=client).order_by('-start_date'))
                            return client, orders
                        except Client.DoesNotExist:
                            pass
            
            print(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {clean_phone}")
            return None, None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            return None, None

    async def get_orders_by_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        phone = update.message.contact.phone_number
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if phone.startswith('+'):
            phone = phone[1:]
        elif phone.startswith('8'):
            phone = '7' + phone[1:]
        elif phone.startswith('7'):
            phone = phone
        else:
            phone = '7' + phone

        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = await self.get_client_by_phone(phone)
        
        if client:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
            orders = await self.get_active_orders(client)
            
            if orders:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                keyboard = []
                for order in orders:
                    status_emoji = {
                        'new': 'üìù',
                        'in_progress': '‚öôÔ∏è',
                        'ready': '‚úÖ'
                    }.get(order.status, '')
                    keyboard.append([f'{status_emoji} –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}'])
                keyboard.extend([
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f'–ù–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n'
                    f'üìù - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n'
                    f'‚öôÔ∏è - –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ\n'
                    f'‚úÖ - –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
                    reply_markup=reply_markup
                )
                return PHONE
            else:
                keyboard = [
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
                    reply_markup=reply_markup
                )
                return PHONE
        else:
            keyboard = [
                ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                '–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                reply_markup=reply_markup
            )
            return PHONE

    async def get_orders_by_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = update.message.text
        
        if text == 'üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –±–∞–∑—ã
            await self.application.bot.send_location(
                chat_id=update.effective_chat.id,
                latitude=59.196899,
                longitude=39.803727
            )
            await update.message.reply_text(
                '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n'
                '—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞ 88–≤, –±–æ–∫—Å 101'
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
            if hasattr(context, 'user_data') and 'last_client' in context.user_data:
                client = context.user_data['last_client']
                active_orders = await self.get_active_orders(client)
                keyboard = []
                for order in active_orders:
                    status_emoji = {
                        'new': 'üìù',
                        'in_progress': '‚öôÔ∏è',
                        'ready': '‚úÖ'
                    }.get(order.status, '')
                    keyboard.append([f'{status_emoji} –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}'])
                keyboard.extend([
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:',
                    reply_markup=reply_markup
                )
            return PHONE
        elif text == 'üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            keyboard = [
                [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
                ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n'
                '1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä"\n'
                '2. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX',
                reply_markup=reply_markup
            )
            return PHONE
        elif text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            return await self.start(update, context)
        elif text.startswith('–ó–∞–∫–∞–∑ ‚Ññ') or text.startswith('‚úÖ –ó–∞–∫–∞–∑ ‚Ññ') or text.startswith('‚öôÔ∏è –ó–∞–∫–∞–∑ ‚Ññ') or text.startswith('üìù –ó–∞–∫–∞–∑ ‚Ññ'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
            order_number = text.split('‚Ññ')[1].strip()
            order = await self.get_order_by_number(order_number)
            
            if order:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
                client = await self.get_order_client(order)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['last_client'] = client
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                total_debt = await self.get_client_total_debt(client)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                message = (
                    f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order.order_number}:\n\n'
                    f'–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n'
                    f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.start_date.strftime("%d.%m.%Y")}\n'
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ‚ÇΩ\n'
                    f'–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {order.prepayment or 0} ‚ÇΩ\n'
                    f'–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {order.get_debt()} ‚ÇΩ\n\n'
                    f'–û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {total_debt} ‚ÇΩ'
                )
                await update.message.reply_text(message)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
                active_orders = await self.get_active_orders(client)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                keyboard = []
                for active_order in active_orders:
                    status_emoji = {
                        'new': 'üìù',
                        'in_progress': '‚öôÔ∏è',
                        'ready': '‚úÖ'
                    }.get(active_order.status, '')
                    keyboard.append([f'{status_emoji} –ó–∞–∫–∞–∑ ‚Ññ{active_order.order_number}'])
                keyboard.extend([
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f'–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:',
                    reply_markup=reply_markup
                )
                return PHONE
            else:
                keyboard = [
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                    reply_markup=reply_markup
                )
                return PHONE
        else:
            # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            return await self.process_phone(update, text)

    @sync_to_async
    def get_order_by_number(self, order_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            return Order.objects.get(order_number=order_number)
        except Order.DoesNotExist:
            return None

    @sync_to_async
    def get_client_by_phone(self, phone):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            clean_phone = ''.join(filter(str.isdigit, phone))
            
            if len(clean_phone) == 11:
                print(f"–ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {clean_phone}")
                
                try:
                    return Client.objects.get(phone=clean_phone)
                except Client.DoesNotExist:
                    if clean_phone.startswith('7') or clean_phone.startswith('8'):
                        alt_phone = clean_phone[1:]
                        print(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä: {alt_phone}")
                        try:
                            return Client.objects.get(phone=alt_phone)
                        except Client.DoesNotExist:
                            pass
            
            print(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {clean_phone}")
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            return None

    async def process_phone(self, update: Update, phone: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if phone.startswith('+'):
            phone = phone[1:]
        elif phone.startswith('8'):
            phone = '7' + phone[1:]
        elif phone.startswith('7'):
            phone = phone
        else:
            phone = '7' + phone

        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = await self.get_client_by_phone(phone)
        
        if client:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
            orders = await self.get_active_orders(client)
            
            if orders:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                keyboard = []
                for order in orders:
                    status_emoji = {
                        'new': 'üìù',
                        'in_progress': '‚öôÔ∏è',
                        'ready': '‚úÖ'
                    }.get(order.status, '')
                    keyboard.append([f'{status_emoji} –ó–∞–∫–∞–∑ ‚Ññ{order.order_number}'])
                keyboard.extend([
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f'–ù–∞–π–¥–µ–Ω—ã –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n'
                    f'üìù - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n'
                    f'‚öôÔ∏è - –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ\n'
                    f'‚úÖ - –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
                    reply_markup=reply_markup
                )
                return PHONE
            else:
                keyboard = [
                    ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
                    reply_markup=reply_markup
                )
                return PHONE
        else:
            keyboard = [
                ['üìç –£–∑–Ω–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'],
                ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                '–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                reply_markup=reply_markup
            )
            return PHONE

    @sync_to_async
    def get_active_orders(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
        return list(Order.objects.filter(
            client=client,
            status__in=['new', 'in_progress', 'ready']
        ).order_by('-start_date'))

    @sync_to_async
    def get_client_total_debt(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        total_debt = 0
        for order in Order.objects.filter(client=client):
            total_debt += order.get_debt()
        return total_debt

    @sync_to_async
    def get_order_client(self, order):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞"""
        return order.client

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        await update.message.reply_text(
            '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

def create_order_form():
    form = {
        'customer_name': '',
        'phone': '',
        'order_description': '',
        'order_cost': '',
        'prepayment': '',
        'deadline': '',
        'status': 'new'
    }
    return form 