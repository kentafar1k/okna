# Generated by Django 5.1.4 on 2025-04-17 15:23

# orders/migrations/0010_rename_pdf_to_order_file.py


import os
from django.db import migrations, models
from django.core.validators import FileExtensionValidator


def transfer_pdf_to_order_file(apps, schema_editor):
    Order = apps.get_model('orders', 'Order')
    # Получаем путь к медиа-папке
    from django.conf import settings
    MEDIA_ROOT = settings.MEDIA_ROOT

    for order in Order.objects.all():
        if order.pdf_file:
            # Сохраняем текущий путь к файлу и имя файла
            old_file_path = order.pdf_file.path
            old_file_name = order.pdf_file.name

            # Создаем новое имя файла
            new_file_name = old_file_name.replace('orders_pdf/', 'orders_files/')

            # Создаем директорию назначения, если она не существует
            new_dir = os.path.join(MEDIA_ROOT, 'orders_files')
            if not os.path.exists(new_dir):
                os.makedirs(new_dir)

            # Путь к новому файлу
            new_file_path = os.path.join(MEDIA_ROOT, new_file_name)

            # Копируем файл в новое местоположение (а не перемещаем, чтобы сохранить оригинал на случай проблем)
            try:
                if os.path.exists(old_file_path):
                    # Создаем директорию для нового файла, если она не существует
                    os.makedirs(os.path.dirname(new_file_path), exist_ok=True)

                    # Копируем файл
                    with open(old_file_path, 'rb') as src, open(new_file_path, 'wb') as dst:
                        dst.write(src.read())

                    # Обновляем запись в базе данных
                    order.order_file = new_file_name
                    order.save(update_fields=['order_file'])
                else:
                    print(f"Предупреждение: файл не найден: {old_file_path}")
            except Exception as e:
                print(f"Ошибка при копировании файла {old_file_path} в {new_file_path}: {str(e)}")


def transfer_order_file_to_pdf(apps, schema_editor):
    """Обратная операция: перенос данных из order_file в pdf_file"""
    Order = apps.get_model('orders', 'Order')
    # Получаем путь к медиа-папке
    from django.conf import settings
    MEDIA_ROOT = settings.MEDIA_ROOT

    for order in Order.objects.all():
        if order.order_file:
            # Сохраняем текущий путь к файлу и имя файла
            old_file_name = order.order_file.name

            # Создаем новое имя файла
            new_file_name = old_file_name.replace('orders_files/', 'orders_pdf/')

            # Создаем директорию назначения, если она не существует
            new_dir = os.path.join(MEDIA_ROOT, 'orders_pdf')
            if not os.path.exists(new_dir):
                os.makedirs(new_dir)

            # Обновляем запись в базе данных
            order.pdf_file = new_file_name
            order.save(update_fields=['pdf_file'])


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0009_orderstatushistory_delete_client'),
    ]

    operations = [
        # 1. Сначала добавляем новое поле order_file
        migrations.AddField(
            model_name='order',
            name='order_file',
            field=models.FileField(
                blank=True,
                help_text='Загрузите файл заказа (PDF, Excel, Word)',
                null=True,
                upload_to='orders_files/',
                validators=[FileExtensionValidator(['pdf', 'xlsx', 'xls', 'doc', 'docx'])],
                verbose_name='Файл заказа'
            ),
        ),

        # 2. Переносим данные из pdf_file в order_file
        migrations.RunPython(
            transfer_pdf_to_order_file,
            reverse_code=transfer_order_file_to_pdf
        ),

        # 3. Удаляем старое поле pdf_file
        migrations.RemoveField(
            model_name='order',
            name='pdf_file',
        ),
    ]
